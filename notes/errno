在执行系统调用时，如果出现错误，那么系统会将相应的错误码设置在 errno 变量中。
程序员可以通过读取 errno 的值来判断系统调用是否执行成功，以及出现了哪种错误。在 errno 被设置之前，它的值是未定义的。
如果系统调用执行成功，那么 errno 的值不会被修改，仍然保持为上一次设置的值。
因此，在调用某个系统调用之前，可以将 errno 的值设置为 0，这样可以判断系统调用是否执行成功，而不会被上一次的错误干扰。
以下是一些常见的错误码：
EACCES：拒绝访问，权限不够。
EEXIST：文件已经存在，而请求创建的文件已经存在。
EINVAL：无效的参数，通常是因为参数的值不在有效的范围内或不符合规定的格式。
EIO：输入/输出错误，通常是因为设备出现错误或磁盘空间不足。
ENOENT：未找到文件或目录，请求访问的文件或目录不存在。
ENMEM：无法分配内存，系统内存不足或进程已经达到了内存限制。
ENOSPC：没有足够的空间，磁盘已满或没有足够的空间创建新的文件。
ENOTDIR：不是目录，请求操作的文件不是一个目录。
EPERM：操作不允许，通常是因为权限不够或者试图修改只读文件。
ESRCH：没有这样的进程，请求访问的进程不存在。
需要注意的是，不同的系统调用会产生不同的错误码，因此在处理错误时，需要根据实际的情况来确定错误码的含义。
此外，一些库函数也会设置 errno 变量，因此在使用库函数时，同样需要检查 errno 变量的值。