1. 用函数创建新线程时，新线程为保证拥有独立的栈区会将参数复制一份，这里参数有俩个地方需要注意：
	-当指针或作为参数时，要保证指针指向的资源没有释放（主线程提前结束时释放，或者人工释放的）
	-当类作为参数时，一般由创建它的线程去复制一份到新的线程中。这里引出一个问题，如果由新线程创建，可能主线程已经结束，那么资源释放会导致创建类失败；所以推荐由主线程创建，并进行拷贝构造进入新线程中。
	-在解决第一个问题时，用const & 取代一般的指针或者引用，理论上来说为了摆脱“资源释放”问题，那么const 应该进行参数复制，目前没有验证这个问题。


2. 资源销毁时一般由子线程进行销毁.

多线程：
    lock_guard<std::mutex> obj(mutex);
        自动加锁，如果第二个参数有std::adopt_lock,则加过锁之后，就不再枷锁了；

    unique_lock<std::mutex> obj(mutex);
        参数可以有std::adopt_lock，功能类似上面；
        还有std::try_to_lock,obj.owns_lock()判断分支;
        参数std::defer_lock,前提是开发者不可以自己把互斥量lock上;
        方法有:lock,unlock,try_lock,release
        可以通过move或者返回值，移交所有权。

    std::call_once,保证函数只执行一遍；
        参数：std::one_flag one_flag, method

    条件变量：
        std::condition_variable obj;
        obj.wait(mutex,method);绑定到mutex上，视为一体，method返回false，直接返回，true直接执行。
        notify_one(),notify_all();

    std::async,std::future:
        std::future<int> re= std::async(method,参数)
