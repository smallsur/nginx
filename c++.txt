#pragma warning(disable:4996)

强制转换：
	枚举类：enum color color1 = (enum color)1000


typedef的使用方法：
	在常规的定义方法上，将变量名替换成类型名字，在前面添加typedef就行了,俩个例子
	1.int n[100] --->int NUM[100] --->typedef int NUM[100] --->NUM n;
	2.int m --->int NUM --->typedef int NUM --->NUM m;



关于位运算的简单记忆：
	& 全1为1
	| 全0为0
	^ 相同为0,不同为1
	应用：&和|用于提取1或0，例如：1000000可以&提取一个数的第7位是1或者0,另外，用|运算的0111111也可以。


文件打开和关闭：
	FILE *p = fopen() 失败返回NULL
	fclose(p) 关闭
	文件读写主要有一个缓冲区，close会自动刷新缓冲区。
文件读取：
	fputc，fgetc

命名空间：
	1.using使用注意函数同名

c++初始化设置：
	一般变量可以用{}进行初始化，int m{0};
	一般变量可以用()进行初始化, int m(0);
	数组初始化也可以用{},int m[]{1,2,3,4};

auto关键字：
	类型推断发生在编译期；


const关键字：
	编译器会检查常量是否会变化；
	实际情况下可以修改的， const int m = 10; int &n = (int &)m; n = 100;
	在成员函数后面加上const,表示函数不改变类的值，但是mutable修饰的可以更改；
	const成员初始化在初始化列表中进行。

constexpr关键字：
	告诉编译器可以在编译时求值；
	constexpr int var2 = func(),func()需要声明成constexpr,未定义的变量，代码过长，函数参数不是变量，printf函数调用，等等，都不能通过编译。
	自带inline属性。

for语句：
	for(auto x:a),进行的是复制操作，可以采用引用操作代替复制；


c++内存布局：
	有堆，栈，静态存储区（全局变量，静态变量，类静态变量，const修饰），动态存储区，代码存放区

NULL和nullptr:
	默认情况下，类型不同，int和std::nullptr(void);

c++函数：
	一般声明的时候不需要形参名，定义的时候需要；
	新增了后置返回类型：
		auto func()->int{
		return 1;
		}
	inline函数：
		修饰之后，编译期间在代码处展开，具体展不展开取决于编译器本身。
		内联函数源代码定义在头文件中，
	特殊写法总结：
		1.返回值为void的函数，可以返回一个(返回值为void的函数)
		2.重载函数，参数类型不同，数量不同。(const int 和  int is same)
string:
	1.initialization: string a="qwert",b("qwert"),b(a),b=a,b(num,'a');
	2.string[n] return the ref of the string;
	3.c_str return the address of characters in the string;


类型转换：
	static_cast<>():编译时期进行，类型转换，类转换
	dynamic_cast<>():运行时期进行，类转换（有类型检查，安全性较高，但代价也高）。
	const_cast:编译时期进行，去掉const属性（只有这个值原来就是变量才安全）。
	reinterpert_cast:编译时期进行。

类中static成员：
	可以用类名引用，变量引用使用静态变量；

构造函数：
	1.编译器不一定就会生成默认构造函数，看条件，而且如果编译器没有为其生成构造函数，用户没有定义，在构造对象时，也能执行成功。
继承：
	方法： 同名函数子类会覆盖父类，object.class::method(),或者用using在类中声明重载。
	虚函数：在函数名后面加override表示虚继承，final修饰表示不继承了。
	纯虚函数：表示类只能继承，不能实例化，一般类中只定义了虚函数，没有其他的内容。
	友元：将其他函数或者类作为自己的类的扩展。
	继承拷贝函数：子类向父类赋值时，调用父类的拷贝构造函数或者拷贝复制函数，因此只复制一部分子类的值。
	一个类只能继承直接基类的构造函数


右值左值：
	1.左值可能同时具备左值属性和右值属性；
	2.左值一般指有地址的变量（不完全对），右值指不能作为左值的值；
	3.左值引用，右值引用，const引用；
		4.这些定义其实是为了作出区分；
		5.左值引用绑定左值，右值引用绑定右值；
		6.返回非引用类型的函数，返回的是右值；相反；
		    	int i = 10;
    			int &&j = i++;
    			int &k = j;
			//    int &&u = j;
	8.移动构造函数：和拷贝构造函数相似，参数换成右值引用
		7.产生临时对象：传参，返回，构造；

noexcept:优化速度，告诉编译器不发生异常

隐式类型转换：有点像拷贝构造函数
类型转换函数：operator int(){};
    一般可以隐式转换，如果有explicit，需要用static_cast()

    可能会出现二异性问题

类成员函数指针：
    更换名字，void (object::*name)(形参)；
    有一个例外，就是类静态函数不需要类的限定符，void (*name)(形参)；

类成员变量指针：
    类成员变量一般是变量在类中的偏移地址
    相反，静态变量不是。


模板：
    1.函数：
        模板函数中可以提供俩中类型：typename T,或者具体类型 int m;
        具体推断看用户传入的值，没有则编译器自动推断；
        编译器推断具体类型的时候，具体类型可以提供值，有或者让编译器推断值；
        注意，具体类型如果由用户提供的话，只能传入字面常量；
        可以申明成inline函数。



模板非类型参数不能是double类型，而且不能是类类型，可以有默认参数；

模板需要注意解释的二异性：
    在用到类中申明的类型时，编译器有可能将它设为静态成员，导致程序错误；需要加上typename消除二异性：
        template<typename T> typename test<T>::iterate test<T>::begin();
        typename的作用是通知编译器，修饰的内容是类型。


typedef int(*funtype)(int, int);


共享模板操作：
    在一个文件中显示创建一个模板，如果其他的文件用则extern声明调用；
    template object<type>; extern template object<type>;


用using结合template使用，可以根据模板定义别名：
    template<typename T> using type = map<T,T>;
    type<int> m;
    或者用typedef代替：
    template<typename T> struct map_{
        typedef map<T,T> type;
    }
    map_<int>::type m;


模板特化：
    定义内容和以前一样：
    template<> void method(type,type){};


可变参模板：
    函数：
    template<typename ...T> returnType method(T&... args){}; 省略号在定义和使用中相反。
        在使用中，一般用递归的方法递归每一个参数，还需要一个无参的同名调用函数用来终止递归。
    类：
    1.递归继承：
    template<typename ...T> class object{};
    template<typename first, typename ...others> object<first, others...>:object<others...>{};
        通过继承实现类递归实例化，当继承到没有参数的类时，创建这个类并停止创建。

    2.递归组合：
    template<typename first, typename ...others> object{
    //构造
    object(first f,others...):my(f),others(others...){};
    object<others...> others;
    first my;
    }

    3.通过类的静态方法，递归调用，然后生成不同的类，传递参数的方法可以用元组的方式：



operator new() 和operator delete():
    是用来申请内存和释放内存的，new关键字会调用。
    补充：
        new关键字申请内存时，会记录申请的大小和位置等信息，等delete删除时会利用这段信息。
        一个什么都没有的类占用1字节，保存地址？
        创建数组会使用额外内存保存数组，大概是四字节。


share_ptr:
    1.没有隐式转换；
    2.创建：1.(); 2.make_shared()
    3.创建之后，只使用ptr进行操作，交换(swap)，赋值，也可以用move移动赋值；
    4.use_count(),unique();
    5.reset(),去掉本身，引用减一,nullptr；
    6.get(),不建议使用;
    7.指定删除器(参数是指针)，一般初始化中可以制定；
    8.数组类管理，注意指定配套删除器。

weak_ptr:
    1.share_ptr的助手，主要起到监视作用；
    2.创建：1.由share_ptr通过构造函数；2.由share_ptr等号赋值；3.由weak_ptr等号赋值；
    3.lock(),资源还在不在，在就返回share_ptr指针,否则返回nullptr;
    4.use_count(),返回share_ptr数量；
    5.expired(),返回bool;
    6.reset(),置空weak_ptr;

使用share_ptr注意循环引用问题。

unique_ptr:
    1.创建：();
    2.只支持移动语义的传值，move；
    3.release(),释放指针；
    4.不使用控制快；
    5.删除器有所不同。


new 和 malloc函数：
    1.new会调用构造函数，malloc不会；
    2.new是关键字，malloc是函数；
int *A = new A;
int *A = new A();
int *A = new A(100);

new在分配内存时，会额外分配字节(40?),返回的指针是中间的数据起始地址。
内存分布：
    记录大小；
    DEBUG调试信息；
    分配的数据；
    字节填充等操作，提高效率；
    尾标记，回收内存时用到的；

数组内存分布：
    记录大小；
    DEBUG调试信息；
    数组的大小；
    分配的数据；
    字节填充等操作，提高效率；
    尾标记，回收内存时用到的；

new 关键字会计算变量或者数组总共占用的字节数，统一分配，并调用malloc函数一次性分配，
最后，delete在释放时，free根据记录的大小信息依次释放内存(并调用析构函数)。


内存池：
    new函数重载可以重载多个,但是注意第一个参数都是size_t,同时最好有个一配套的delete重载

STL:
    容器
    迭代器
    算法
    分配器
    其他

vector会频繁的拷贝和析构对象，因此最好提前确定大小。
如果大小不便，插入删除对象也会析构并创建对象。

list分配器默认没有内存池

迭代器：
    输出型迭代器 ostream
    输入型迭代器 istream
    前向迭代器   forward_list,unordered容器
    双向迭代器   list,set,multiset,map,multimap
    随机访问迭代器（最后四个是继承关系）array,string,vector,deque

函数对象：function<int(int)> = k; k如果是对象的话，会调用拷贝构造函数。

万能引用：
    在模板中适用，T&&，可以推断左值，也可以推断右值；
    注意，如果前面有const修饰，那么这个万能引用会变为右值引用；
    同时，在类模板推板上要注意区分成员函数的万能引用T不能是类模板提供的，否则变成了普通的万能引用；

万能引用其实是编译器在内部进行引用折叠。

模板推断：
    int i = 10;
    const int j = i;
    const int &k = i;
    inference(i); int int&;
    inference(j); int const; int const&;
    inference(k); int const; int const&;


std::forward:将左值转成左值，右值转成右值；


auto在编译期间推倒并替换变量；


auto会抛弃一些推断，但是decltype不会抛弃。




